--- peter-classRpmEngine.cpp	2009-08-17 06:44:30.000000000 +0800
+++ jh-classRpmEngine.cpp	2009-08-17 06:43:39.000000000 +0800
@@ -1,43 +1,58 @@
 int classRpmEngine::DealwithDependence(rpmts ts,  rpmps ps)
 {
+#ifdef DEBUG
+	TRC_PRINT_FUNC_START(stdout);
+#endif
 	if(g_callBackCheck)
 	g_callBackCheck(0, 0, "", "");
 
-	if(m_nDepCount > 50 ||  m_nDepTotalCount > 100)
+	if(m_nDepCount > DEP_COUNT)
 	{
 		char szMessage[MAX_STRING] ;
-		snprintf(szMessage, sizeof(szMessage),"Can not find the required package. DepCount=%d, DepTotalCount=%d",m_nDepCount,m_nDepTotalCount);
-		m_Logger->WriteLog_char(ERROR_LOG, MYSELF_NAME, szMessage,NULL);
+		snprintf(szMessage, sizeof(szMessage),"Can not find the required package. (DepCount=%d)",m_nDepCount);
+		WriteLog_char(ERROR_LOG, MYSELF_NAME, szMessage,NULL);
 		return -9;
 	}
-	m_nDepTotalCount++;
-
-	int i=0; 
-	int result=0; 
-	int upgrade=0; 
+	m_nDepCount++;
+	int i=0;
+	int result=0;
+	int upgrade=0;
 	int rc=0;
 	int ignoreNumber=0;
 	char tmp[MAX_STRING],tmp2[MAX_STRING] ;
-	char strName[MAX_STRING]; 
-	memset(tmp, 0, sizeof(tmp)); 
+	char strName[MAX_STRING];
+
+	rpmpsi psi1=NULL;
+	rpmpsi psi2=NULL;
+	rpmProblem pProblems=NULL;
+
+	memset(tmp, 0, sizeof(tmp));
 	memset(tmp2, 0, sizeof(tmp2));
 	memset(strName, 0, sizeof(strName));
 
-
 	struct structRPMInfo *requiredRPM=NULL;
 
-	if (ps == NULL || ps->probs == NULL || ps->numProblems <= 0)
+	if (ps == NULL  || rpmpsNumProblems(ps) <= 0)
 	{
-
 		return 0;
 	}
 
 	ignoreNumber = 0;
-	for (i = 0; i < ps->numProblems; i++) {
-		requiredRPM = (struct structRPMInfo *)malloc(sizeof(struct structRPMInfo)); 
+	psi1 = rpmpsInitIterator(ps);
+
+	//for (i = 0; i < rpmpsNumProblems(ps); i++) {
+	while(rpmpsNextIterator(psi1) > -1)
+	{
+		pProblems = rpmpsGetProblem(psi1);
+		/*if(pProblems == NULL)
+		{
+			rpmpsFreeIterator(psi1);
+			return false;
+		}*/
+		requiredRPM = (structRPMInfo *)malloc(sizeof(struct structRPMInfo));
 		if(requiredRPM == NULL)
 		{
-			m_Logger->WriteLog_char(ERROR_LOG, MYSELF_NAME, "malloc error in DealwithDependence() function",NULL);
+			WriteLog_char(ERROR_LOG, MYSELF_NAME, "malloc error in DealwithDependence() function",NULL);
 			return -1;
 		}
 		memset(requiredRPM, 0, sizeof(structRPMInfo));
@@ -58,53 +73,26 @@
 		requiredRPM->provideName = NULL;
 		requiredRPM->provideVersion= NULL;
 		requiredRPM->requireFileNumber = 0;
-		requiredRPM->containFiles = NULL;
+		requiredRPM->obsoleteName = NULL;
+		requiredRPM->obsoleteTags.clear();
+		requiredRPM->obsoleteVersion = NULL;
 		requiredRPM->h = NULL;
-
 		rpmProblem p;
 		int j=0;
 
-		p = ps->probs + i;
-
-		if (p->ignoreProblem) {
-			ignoreNumber++;
-			if(requiredRPM)
-			{
-				free(requiredRPM);
-				requiredRPM=NULL;
-			}
-			continue;
-		}
-
-        // Filter already displayed problems.
-		for (j = 0; j < i; j++) {
-			if (!SameProblem(p, ps->probs + j))
-			//@innerbreak@
-			break;
-		}
-
-		if (j < i) {//It is same problem
-			ignoreNumber++;
-			if(requiredRPM)
-			{
-				free(requiredRPM);
-				requiredRPM=NULL;
-			}
-			continue;
-		}
-		// update
-		if (m_nCommand == 1)
+		// Update, Install
+		if(GetCommand() == 1)
 		{
-			result = GetRequiredPkgFromRemote(p, requiredRPM);
+			result = GetRequiredPkgFromRemote(pProblems, requiredRPM);
 		}
+		// Remove
 		else
 		{
-			result = GetRequiredPkgFromLocal(p, strName);
+			result = GetRequiredPkgFromLocal(pProblems, strName);
 		}
 		string strCurRequired="";
 		switch(result) {
 			case -1: //not find
-				m_nDepCount++;
 				break;
 			case -2: //find but is in m_selectedPkgRPMInfoList, should be ignore.
 			case -3: //find but have been installed, should be ignore.
@@ -120,63 +108,64 @@
 			return -7;
 				break;
 			case 0: //find
-				if (m_nCommand == 1)
+				// Update, Install Mode.
+				if(GetCommand() == 1)
 				{
-	
 					if(MAX_STRING > m_vectorCacheDirInfo.at(requiredRPM->disknum).strCacheDir.length() + strlen(requiredRPM->name) + strlen(requiredRPM->version) + strlen(requiredRPM->release) + strlen(requiredRPM->arch) + 17)
 					{
-	
 						snprintf(tmp, sizeof(tmp),  "%s/packages/%s-%s-%s.%s.rpm",
-							m_vectorCacheDirInfo.at(requiredRPM->disknum).strCacheDir.c_str(),
-							requiredRPM->name,
-							requiredRPM->version,
-							requiredRPM->release,
-							requiredRPM->arch);
+						m_vectorCacheDirInfo.at(requiredRPM->disknum).strCacheDir.c_str(),
+						requiredRPM->name,
+						requiredRPM->version,
+						requiredRPM->release,
+						requiredRPM->arch);
 					}
 					else
 					{
 						FreeRequiredRPM(requiredRPM);
-						m_Logger->WriteLog_char(ERROR_LOG, MYSELF_NAME, "The length of file path error in DealwithDependence() function",NULL);
+						WriteLog_char(ERROR_LOG, MYSELF_NAME, "The length of file path error in DealwithDependence() function",NULL);
 						return -1;
 					}
 					if(MAX_STRING > m_vectorCacheDirInfo.at(requiredRPM->disknum).strURL.length() + strlen(requiredRPM->name) + strlen(requiredRPM->version) + strlen(requiredRPM->release) + strlen(requiredRPM->arch) + 8)
 					{
 						snprintf(tmp2, sizeof(tmp2),  "%s/%s-%s-%s.%s.rpm",
-							m_vectorCacheDirInfo.at(requiredRPM->disknum).strURL.c_str(),
-							requiredRPM->name,
-							requiredRPM->version,
-							requiredRPM->release,
-							requiredRPM->arch);
+						m_vectorCacheDirInfo.at(requiredRPM->disknum).strURL.c_str(),
+						requiredRPM->name,
+						requiredRPM->version,
+						requiredRPM->release,
+						requiredRPM->arch);
 					}
 					else
 					{
 						FreeRequiredRPM(requiredRPM);
-						m_Logger->WriteLog_char(ERROR_LOG, MYSELF_NAME, "The length of file path error in DealwithDependence() function",NULL);
+						WriteLog_char(ERROR_LOG, MYSELF_NAME, "The length of file path error in DealwithDependence() function",NULL);
 						return -1;
 					}
-	
-					if (AddFile(tmp, REQDEP, requiredRPM->upgradeFlag) < 0)
+
+					if (AddFile(tmp, REQDEP, requiredRPM->upgradeFlag) == 0)
+					{
+						m_nDepCount = 0;
+					}
+					else
 					{
 						break;
 					}
-	
+
 					m_Network->AddPackage(tmp, tmp2);
-	
+
 					int nRet = m_Network->GetPackages();
 					if (nRet != NETWORK_RETOK)
 					{
-						FreeRequiredRPM(requiredRPM);	
+						FreeRequiredRPM(requiredRPM);
 						return -10;
 					}
-	
-					m_Logger->WriteLog_char(DEBUG_LOG, MYSELF_NAME, "Find required packages : ",tmp ,NULL);
-	
+					WriteLog_char(DEBUG_LOG, MYSELF_NAME, "Find required packages : ",tmp ,NULL);
 					upgrade = requiredRPM->upgradeFlag;
 					char * strTemp = strdup(tmp);
 					if(strTemp == NULL)
 					{
 						FreeRequiredRPM(requiredRPM);
-						m_Logger->WriteLog_char(ERROR_LOG, MYSELF_NAME, "strdup error in DealwithDependence() function",NULL);
+						WriteLog_char(ERROR_LOG, MYSELF_NAME, "strdup error in DealwithDependence() function",NULL);
 						return -1;
 					}
 					m_vectorDepAddedFiles.push_back(strTemp);
@@ -188,9 +177,8 @@
 						return -10;
 					}
 					#endif
-	
 				}
-				else
+				else //Remove Mode.
 				{
 					bool bFindRemove=false;
 					vector<structAddedFile>::iterator it;
@@ -206,7 +194,7 @@
 							break;
 						}
 					}
-	
+
 					if (bFindRemove == false)
 					{
 						char * strTemp = strdup(strName);
@@ -217,19 +205,16 @@
 								free(requiredRPM);
 								requiredRPM=NULL;
 							}
-							m_Logger->WriteLog_char(ERROR_LOG, MYSELF_NAME, "strdup error in DealwithDependence() function",NULL);
+							WriteLog_char(ERROR_LOG, MYSELF_NAME, "strdup error in DealwithDependence() function",NULL);
 							return -1;
 						}
-	
 						AddFile(strTemp, REQDEP, 0);
 						AddRemovePackage(ts, strTemp);
 					}
 				}
-	
 				break;
 		} // end switch.
-		
-		if (m_nCommand == 1 && result == 0)
+		if(GetCommand() == 1 && result == 0)
 		{
 			FreeRequiredRPM(requiredRPM);
 		}
@@ -242,29 +227,30 @@
 			}
 		}
 	}
-	//rpmtsClean(ts);
+	rpmpsFreeIterator(psi1);
 	rpmpsFree(ps);
 	ps = NULL;
-	
 	/// In DealwithDependence Function
-	rc = rpmtsCheck(ts);	
-
+	rc = rpmtsCheck(ts);
 	ps = rpmtsProblems(ts);
-	if (rc || ps->numProblems > 0) {
-		// Disk space is not enough error        
+	if (rc || rpmpsNumProblems(ps) > 0)
+	{
+		// Disk space is not enough error
 		result = DealwithDependence(ts, ps);
 		return result;
-	} else {
-		//rpmtsClean(ts);
+	}
+	else
+	{
 		rpmpsFree(ps);
-		ps = NULL;  
-		vector<structAddedFile> vectorInstall;	
+		ps = NULL;
+		vector<structAddedFile> vectorInstall;
 		vector<structAddedFile> vectorRemove;
 		vectorInstall = GetAddedFile(UPDATE, vectorInstall);
 		vectorRemove = GetAddedFile(REMOVE, vectorRemove);
-
-		//return vectorInstall.size() + vectorRemove.size();
-		return 0;
+#ifdef DEBUG
+    TRC_PRINT_FUNC_END(stdout);
+#endif
+		return vectorInstall.size() + vectorRemove.size();
 	}
-
 }
+
