epoch debug tmp

>>>it seems that if the remote epoch is 0, then the local coresponing one is none
and if remote is 1, the local is 1 as well

>>> it comment out all stuff about epoch it is 73 packages to be updated
>>> if you set all the local (none) to 0, and set nCompare=-1 when(l>r||l<r), there will be 61 packages---no irqbanlance
>>>if when(l<r)nCompare=1; when(r<l)nCompare=-1;.......................................................181  with irqbanlence in
>>>if when(l<r)nCompare=-1; when(r<l)nCompare=1;........................................................62   no  irqbanlence

now it is totally wrong.

anyway the conclution is the epoches of irqbanlance are read out(or only one is read out), but the comparason is wrong.

Now I am sure the remote irq epoch is read out and it is 1;

>>>if the local irq is removed, irq will never show up on the update list.

>>>a good news, I see r1-irq+-------and irq-----local epoch I don't know show up together. that means I do not need to worry the itreator issue!!!

>>>rpm 4.4.2 CHANGES; 
- treat missing epoch's exactly the same as Epoch: 0.
- add explcit "Provides: name = [epoch:]version-release" to headers.

>>>*ep has to be int_32, cause we have jdk in asianux whose epoch is 2000.

>>>note: if you add epoch comparison at wrong place, only the packages in Base is compared, so maybe a wrong updatelist is generated.
eg. I have irq-1.13 locally, and the same 1.13 in Base, while 0.55 in UPDATE. so maybe the program only compare the BASE irq with the local one.

>>>no matter 1.13 is in BASE or UPDATE, as long as it is there, 0.55 can never be added to update list!!!
